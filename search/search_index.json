{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to pippy","text":"<p>pippy is a Python package for accessing the World Bank's Poverty and Inequality Platform (PIP) API. It provides an easy-to-use interface for retrieving poverty and inequality statistics, as well as auxiliary data.</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>Retrieve poverty and inequality statistics</li> <li>Access World Bank global/regional stats</li> <li>Fetch auxiliary data like country lists, regions, CPI, etc.</li> <li>Simple and intuitive API</li> </ul> <p>Check out the Getting Started guide to begin using pippy.</p>"},{"location":"api.html","title":"API Reference","text":"<p>This page contains the API reference for the pippy package.</p>"},{"location":"api.html#main-functions","title":"Main Functions","text":""},{"location":"api.html#get_stats","title":"get_stats","text":"<p>Retrieve poverty and inequality statistics from the World Bank's PIP API.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>str</code> <p>Country code or 'all' for all countries. Defaults to 'all'.</p> <code>'all'</code> <code>year</code> <code>str or int</code> <p>Year or 'all' for all years. Defaults to 'all'.</p> <code>'all'</code> <code>povline</code> <code>float</code> <p>Poverty line in PPP dollars per day.</p> <code>None</code> <code>popshare</code> <code>float</code> <p>Population share (0-100).</p> <code>None</code> <code>fill_gaps</code> <code>bool</code> <p>Whether to fill gaps in the data. Defaults to False.</p> <code>False</code> <code>region</code> <code>str</code> <p>Region code.</p> <code>None</code> <code>welfare_type</code> <code>str</code> <p>Type of welfare measure. Defaults to 'all'.</p> <code>'all'</code> <code>reporting_level</code> <code>str</code> <p>Level of reporting. Defaults to 'all'.</p> <code>'all'</code> <code>ppp_version</code> <code>str</code> <p>Version of PPP to use.</p> <code>None</code> <code>release_version</code> <code>str</code> <p>Release version of the data.</p> <code>None</code> <code>format</code> <code>str</code> <p>Format of the returned data. Defaults to 'json'.</p> <code>'json'</code> <code>group_by</code> <code>str</code> <p>Grouping option for the data.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Enable debug logging. Defaults to False.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Use cached data if available. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the requested statistics.</p> <p>Raises:</p> Type Description <code>PIPAPIError</code> <p>If the API request fails or returns unexpected data.</p> Source code in <code>pippy/stats.py</code> <pre><code>def get_stats(\n    country=\"all\",\n    year=\"all\",\n    povline=None,\n    popshare=None,\n    fill_gaps=False,\n    region=None,\n    welfare_type=\"all\",\n    reporting_level=\"all\",\n    ppp_version=None,\n    release_version=None,\n    format=\"json\",\n    group_by=None,\n    debug=False,\n    use_cache=True,\n):\n    \"\"\"\n    Retrieve poverty and inequality statistics from the World Bank's PIP API.\n\n    Args:\n        country (str): Country code or 'all' for all countries. Defaults to 'all'.\n        year (str or int): Year or 'all' for all years. Defaults to 'all'.\n        povline (float, optional): Poverty line in PPP dollars per day.\n        popshare (float, optional): Population share (0-100).\n        fill_gaps (bool): Whether to fill gaps in the data. Defaults to False.\n        region (str, optional): Region code.\n        welfare_type (str): Type of welfare measure. Defaults to 'all'.\n        reporting_level (str): Level of reporting. Defaults to 'all'.\n        ppp_version (str, optional): Version of PPP to use.\n        release_version (str, optional): Release version of the data.\n        format (str): Format of the returned data. Defaults to 'json'.\n        group_by (str, optional): Grouping option for the data.\n        debug (bool): Enable debug logging. Defaults to False.\n        use_cache (bool): Use cached data if available. Defaults to True.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the requested statistics.\n\n    Raises:\n        PIPAPIError: If the API request fails or returns unexpected data.\n    \"\"\"\n    if debug:\n        pippy_logger.setLevel(logging.DEBUG)\n    else:\n        pippy_logger.setLevel(logging.INFO)\n\n    pippy_logger.debug(\"Debug mode enabled\")\n\n    cache_key = f\"stats_{country}_{year}_{povline}_{popshare}_{welfare_type}_{reporting_level}_{ppp_version}_{release_version}\"\n\n    if use_cache:\n        cached_data = get_cached_response(cache_key)\n        if cached_data:\n            pippy_logger.debug(\"Using cached data\")\n            return pd.DataFrame(cached_data)\n\n    endpoint = \"pip-grp\" if group_by else \"pip\"\n    url = f\"{current_server}/{endpoint}\"\n\n    params = {\n        \"country\": country if country != \"all\" else \"ALL\",\n        \"year\": year if year != \"all\" else \"ALL\",\n        \"povline\": povline,\n        \"popshare\": popshare,\n        \"fill_gaps\": \"true\" if fill_gaps else None,\n        \"welfare_type\": welfare_type,\n        \"reporting_level\": reporting_level,\n        \"ppp_version\": ppp_version,\n        \"release_version\": release_version,\n        \"format\": format,\n    }\n\n    if region:\n        params[\"country\"] = region\n\n    if group_by:\n        params[\"group_by\"] = \"wb\" if group_by == \"wb\" else \"none\"\n\n    # Remove None values\n    params = {k: v for k, v in params.items() if v is not None}\n\n    pippy_logger.debug(f\"Request URL: {url}\")\n    pippy_logger.debug(f\"Request params: {params}\")\n\n    try:\n        response = requests.get(url, params=params, timeout=10)\n        pippy_logger.debug(f\"Response status code: {response.status_code}\")\n        pippy_logger.debug(f\"Response headers: {response.headers}\")\n        pippy_logger.debug(f\"Raw response content: {response.text[:1000]}...\")\n        response.raise_for_status()\n\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        if \"application/json\" not in content_type:\n            if \"&lt;html&gt;\" in response.text[:100]:\n                raise PIPAPIError(\n                    \"API returned an HTML error page. The service may be experiencing issues.\"\n                )\n            else:\n                raise PIPAPIError(\n                    f\"Unexpected content type: {content_type}. Full response: {response.text[:1000]}...\"\n                )\n\n        data = response.json()\n        df = (\n            pd.DataFrame(data)\n            if isinstance(data, list)\n            else pd.DataFrame([data])\n        )\n\n        if use_cache:\n            cache_response(cache_key, data)\n\n        return df\n    except requests.RequestException as e:\n        pippy_logger.error(f\"API request failed: {str(e)}\")\n        if isinstance(e, requests.HTTPError) and e.response.status_code == 500:\n            raise PIPAPIError(\n                \"The API server encountered an internal error. Please try again later or contact the API maintainers.\"\n            )\n        raise PIPAPIError(\n            f\"API request failed: {str(e)}\\nResponse content: {getattr(e.response, 'text', '')[:1000]}...\"\n        )\n    except ValueError as e:\n        pippy_logger.error(f\"Failed to parse API response: {str(e)}\")\n        raise PIPAPIError(f\"Failed to parse API response: {str(e)}\")\n</code></pre>"},{"location":"api.html#get_wb","title":"get_wb","text":"<p>Retrieve World Bank global/regional statistics from the PIP API.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>str or int</code> <p>Year or 'all' for all years. Defaults to 'all'.</p> <code>'all'</code> <code>povline</code> <code>float</code> <p>Poverty line in PPP dollars per day.</p> <code>None</code> <code>ppp_version</code> <code>str</code> <p>Version of PPP to use.</p> <code>None</code> <code>release_version</code> <code>str</code> <p>Release version of the data.</p> <code>None</code> <code>format</code> <code>str</code> <p>Format of the returned data. Defaults to 'json'.</p> <code>'json'</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the World Bank global/regional statistics.</p> <p>Raises:</p> Type Description <code>PIPAPIError</code> <p>If the API request fails or returns unexpected data.</p> Source code in <code>pippy/stats.py</code> <pre><code>def get_wb(\n    year=\"all\",\n    povline=None,\n    ppp_version=None,\n    release_version=None,\n    format=\"json\",\n):\n    \"\"\"\n    Retrieve World Bank global/regional statistics from the PIP API.\n\n    Args:\n        year (str or int): Year or 'all' for all years. Defaults to 'all'.\n        povline (float, optional): Poverty line in PPP dollars per day.\n        ppp_version (str, optional): Version of PPP to use.\n        release_version (str, optional): Release version of the data.\n        format (str): Format of the returned data. Defaults to 'json'.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the World Bank global/regional statistics.\n\n    Raises:\n        PIPAPIError: If the API request fails or returns unexpected data.\n    \"\"\"\n    return get_stats(\n        country=\"all\",\n        year=year,\n        povline=povline,\n        group_by=\"wb\",\n        ppp_version=ppp_version,\n        release_version=release_version,\n        format=format,\n    )\n</code></pre>"},{"location":"api.html#auxiliary-data-functions","title":"Auxiliary Data Functions","text":""},{"location":"api.html#get_countries","title":"get_countries","text":"<p>Retrieve a list of countries from the World Bank's PIP API.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to get_aux().</p> <code>{}</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the list of countries.</p> <p>Raises:</p> Type Description <code>PIPAPIError</code> <p>If the API request fails or returns unexpected data.</p> Source code in <code>pippy/auxiliary.py</code> <pre><code>def get_countries(**kwargs):\n    \"\"\"\n    Retrieve a list of countries from the World Bank's PIP API.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to get_aux().\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the list of countries.\n\n    Raises:\n        PIPAPIError: If the API request fails or returns unexpected data.\n    \"\"\"\n    return get_aux(\"countries\", **kwargs)\n</code></pre>"},{"location":"api.html#get_regions","title":"get_regions","text":"<p>Retrieve a list of regions from the World Bank's PIP API.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to get_aux().</p> <code>{}</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the list of regions.</p> <p>Raises:</p> Type Description <code>PIPAPIError</code> <p>If the API request fails or returns unexpected data.</p> Source code in <code>pippy/auxiliary.py</code> <pre><code>def get_regions(**kwargs):\n    \"\"\"\n    Retrieve a list of regions from the World Bank's PIP API.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to get_aux().\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the list of regions.\n\n    Raises:\n        PIPAPIError: If the API request fails or returns unexpected data.\n    \"\"\"\n    return get_aux(\"regions\", **kwargs)\n</code></pre>"},{"location":"api.html#get_cpi","title":"get_cpi","text":"<p>Retrieve Consumer Price Index (CPI) data from the World Bank's PIP API.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to get_aux().</p> <code>{}</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the CPI data.</p> <p>Raises:</p> Type Description <code>PIPAPIError</code> <p>If the API request fails or returns unexpected data.</p> Source code in <code>pippy/auxiliary.py</code> <pre><code>def get_cpi(**kwargs):\n    \"\"\"\n    Retrieve Consumer Price Index (CPI) data from the World Bank's PIP API.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to get_aux().\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the CPI data.\n\n    Raises:\n        PIPAPIError: If the API request fails or returns unexpected data.\n    \"\"\"\n    return get_aux(\"cpi\", **kwargs)\n</code></pre> <p>For more detailed information about each function and its parameters, please refer to the source code documentation.</p>"},{"location":"getting-started.html","title":"Getting Started with pippy","text":""},{"location":"getting-started.html#installation","title":"Installation","text":"<p>You can install pippy using pip:</p> <pre><code>pip install pippy\n</code></pre>"},{"location":"getting-started.html#basic-usage","title":"Basic Usage","text":"<p>Here's a quick example of how to use pippy:</p> <pre><code>import pippy\n\n# Get poverty statistics for Albania\ndf = pippy.get_stats(country=\"ALB\")\nprint(df.head())\n\n# Get World Bank global/regional stats\nwb_stats = pippy.get_wb(year=\"all\")\nprint(wb_stats.head())\n\n# Get auxiliary data\ncountries = pippy.get_countries()\nprint(countries.head())\n</code></pre> <p>For more detailed examples, check out the Examples section.</p>"},{"location":"examples/basic-usage.html","title":"Basic Usage of pippy","text":"<p>This guide demonstrates the basic usage of the pippy package for accessing the World Bank's Poverty and Inequality Platform (PIP) API.</p>"},{"location":"examples/basic-usage.html#installation","title":"Installation","text":"<p>First, install pippy using pip:</p> <pre><code>pip install pippy\n</code></pre>"},{"location":"examples/basic-usage.html#importing-pippy","title":"Importing pippy","text":"<p>Start by importing the pippy package:</p> <pre><code>import pippy\n</code></pre>"},{"location":"examples/basic-usage.html#retrieving-poverty-statistics","title":"Retrieving Poverty Statistics","text":""},{"location":"examples/basic-usage.html#get-statistics-for-a-specific-country","title":"Get statistics for a specific country","text":"<p>To get poverty statistics for a specific country, use the <code>get_stats()</code> function:</p> <pre><code># Get poverty statistics for Albania\nalbania_stats = pippy.get_stats(country=\"ALB\")\nprint(albania_stats.head())\n</code></pre> <p>This will return a DataFrame with poverty statistics for Albania.</p>"},{"location":"examples/basic-usage.html#get-world-bank-globalregional-statistics","title":"Get World Bank global/regional statistics","text":"<p>To retrieve World Bank global or regional statistics, use the <code>get_wb()</code> function:</p> <pre><code># Get World Bank global/regional stats for all years\nwb_stats = pippy.get_wb(year=\"all\")\nprint(wb_stats.head())\n</code></pre>"},{"location":"examples/basic-usage.html#accessing-auxiliary-data","title":"Accessing Auxiliary Data","text":"<p>pippy also provides functions to access various auxiliary data:</p>"},{"location":"examples/basic-usage.html#get-list-of-countries","title":"Get list of countries","text":"<pre><code>countries = pippy.get_countries()\nprint(countries.head())\n</code></pre>"},{"location":"examples/basic-usage.html#get-list-of-regions","title":"Get list of regions","text":"<pre><code>regions = pippy.get_regions()\nprint(regions.head())\n</code></pre>"},{"location":"examples/basic-usage.html#get-cpi-data","title":"Get CPI data","text":"<pre><code>cpi_data = pippy.get_cpi()\nprint(cpi_data.head())\n</code></pre>"},{"location":"examples/basic-usage.html#working-with-different-data-versions","title":"Working with Different Data Versions","text":"<p>You can retrieve information about available data versions:</p> <pre><code>versions = pippy.get_versions()\nprint(versions)\n</code></pre> <p>To use a specific data version, pass it to the <code>version</code> parameter:</p> <pre><code># Select the first available version\nselected_version = versions[0]['version']\n\n# Get statistics for Angola using the selected version\nangola_stats = pippy.get_stats(country=\"AGO\", release_version=selected_version)\nprint(angola_stats.head())\n</code></pre>"},{"location":"examples/basic-usage.html#error-handling","title":"Error Handling","text":"<p>pippy uses custom exceptions to handle errors. Always wrap your API calls in try-except blocks:</p> <pre><code>from pippy import PIPAPIError\n\ntry:\n    invalid_country_stats = pippy.get_stats(country=\"INVALID\")\nexcept PIPAPIError as e:\n    print(f\"An error occurred: {str(e)}\")\n</code></pre> <p>This basic usage guide covers the main functionalities of pippy. For more detailed information about each function and its parameters, please refer to the API Reference section.</p>"}]}